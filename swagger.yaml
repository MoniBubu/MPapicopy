openapi: 3.0.3
info:
  title: API for test automation tutorial
  version: 1.0.0
servers:
  - url: http://localhost:27002
tags:
  - name: user
    description: Operations about user
paths:
  /users:
    get:
      tags:
        - user
      summary: Get all users
      operationId: getUsers
      parameters:
        - name: _limit
          in: query
          description: Get specific count of users
          schema:
            type: number
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/{id}:
    get:
      tags:
        - user
      summary: Get user by user ID
      operationId: getUserByName
      parameters:
        - name: id
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: name that need to be update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid ID format
        "404":
          description: User not found
components:
  schemas:
    User:
      type: object
      required:
        - id
        - firstName
        - lastName
        - age
        - email
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        age:
          type: number
          example: 24
        email:
          type: string
          example: john@email.com
        newsletter:
          type: boolean
          example: true
      xml:
        name: user
