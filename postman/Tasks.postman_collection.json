{
	"info": {
		"_postman_id": "c135c7b6-7056-47fd-8768-491145c2e703",
		"name": "Tasks",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18726878"
	},
	"item": [
		{
			"name": "1 - Head",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// overit status code 500 ",
							"pm.test('Assert status', () => {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"// overit ze response time je menej ako 100ms a viac ako 5ms",
							"pm.test('Assert response time', () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(100);",
							"});",
							"",
							"pm.test('Assert response time', () => {",
							"    pm.expect(pm.response.responseTime).to.be.above(5);",
							"});",
							"",
							"// overit ze response headers obsahuje Content-type je application/json",
							"pm.test('Assert contain response headers', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
							"});",
							"",
							"// overit ze cookies Job ma hodnotu AutomationTester",
							"pm.test('Assert cookies', () => {",
							"  pm.expect(pm.cookies.get('Job')).to.eql('AutomationTester');",
							"});",
							"",
							"// overit ze status je Internal Server Error",
							"pm.test('Status', () => {",
							"    pm.response.to.have.status('Internal Server Error')",
							"});",
							"",
							"",
							"// overit ze response ma body ",
							"pm.test('Response must be valid and have body', ()=> {",
							"    pm.expect(pm.response.to.be.withBody);",
							"    // zmeni request na GET",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "HEAD",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/base",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"base"
					]
				}
			},
			"response": []
		},
		{
			"name": "2 - Get products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// vytvorit si konstantu json ktora bude mat hodnotu response body",
							"const json = pm.response.json();",
							"",
							"// overit ze kazdy item ma kluce material a product pomocou include",
							"pm.test('Include all keys', () => {",
							"    json.forEach(item => {",
							"        pm.expect(item).to.include.keys(['material', 'product']);",
							"    });",
							"});",
							"",
							"// overit ze vsetky ceny produktov su typu number",
							"pm.test('Assert that price is type number', () => {",
							"    json.forEach(item => {",
							"        pm.expect(item.price).to.be.a('number');",
							"        pm.expect(item.price).is.not.null;",
							"    });",
							"});",
							"",
							"// overit ze cena prodktov nie je nulova/prazdna",
							"pm.test('Assert that price is not null', () => {",
							"    json.forEach(item => {",
							"        pm.expect(item.price).is.not.null;",
							"    });",
							"});",
							"",
							"// vytvorit query parameter _limit ktory nam vrati pocet prvko 5",
							"// vytvorit query ktora nam vrati response ktory bude obsahovat 5 itemov",
							" pm.test('Length', () =>{",
							"    pm.expect(json).to.have.lengthOf(5);",
							"});",
							"",
							"// vytvorit query parameter _sort a zoradit podla ceny od najvacsej po najmensiu",
							"// zoradit prvky podla ceny od najvacsej ceny po najmensiu a overit ze prvy cena prveho produktu je vacsia ako cena druheho produktu",
							"pm.test('First item is bigger than second item', () => {",
							"    pm.expect(json[0].price).to.be.greaterThan(json[1].price);",
							"});",
							"",
							"// vytvorit query parameter ktory nam vrati prvky ktore maju cenu od 100 do 400",
							"// cena je vacsia ako 100 a mensia ako 400",
							"pm.test('Greater than 100 and less than 400', () => {",
							"    json.forEach(item => {",
							"        pm.expect(item.price).to.be.within(100, 400);",
							"    });",
							"});",
							"",
							"// najst vsetky produkty ktore maju inStock true a overit ze hodnota je boolean a rovna true",
							"const inStockItem = json.filter(item => item.inStock === true);",
							"",
							"inStockItem.forEach(inStockItem => {",
							"    pm.test(`inStockItem ${inStockItem.product} is true`, () => {",
							"        pm.expect(inStockItem.inStock).to.be.true;",
							"    });",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/products?_limit=5&_sort=price&_order=desc&price_gte=100&price_lte=400",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"products"
					],
					"query": [
						{
							"key": "_limit",
							"value": "5"
						},
						{
							"key": "_sort",
							"value": "price"
						},
						{
							"key": "_order",
							"value": "desc"
						},
						{
							"key": "price_gte",
							"value": "100"
						},
						{
							"key": "price_lte",
							"value": "400"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3 - Get specific product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// vytvorit si konstantu json ktora bude mat hodnotu response body",
							"const json = pm.response.json();",
							"",
							"// dotiahni si treti produkt pomocou path parametra a over to podla ID v response ",
							"pm.test('Path param equal', () => {",
							"    pm.expect(json.id).is.to.equal(3)",
							"});",
							"",
							"// vytvorit objekt ktory chceme porovnavat ",
							"const deepEqual = {",
							"    \"product\": \"Computer\",",
							"    \"name\": \"Practical Cotton Shoes\",",
							"    \"price\": 16.65,",
							"    \"material\": \"Wooden\",",
							"    \"inStock\": true,",
							"    \"updated\": \"2022-12-14 20:28\",",
							"    \"id\": 3",
							"}",
							"",
							"// napisat test na porovnanie ",
							"pm.test('Path param deep equal', () => {",
							"    pm.expect(json).is.to.eql(deepEqual)",
							"});",
							"",
							"// overit ze datum v updated je vo formate DD-MM-YYYY hh:mm:ss pomocou momentjs",
							"let moment = require('moment');",
							"pm.test('Date is valid', () => {",
							"    pm.expect(moment(json.updated,'DD-MM-YYYY hh:mm:ss').isValid()).to.be.true",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/products/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"products",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "4 - Create product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ak response code nebude 200 je potrebne ho vymazat pomocou delete requestu",
							"",
							"// vytvor noveho usera a over ze status code je bude 200 alebo 201",
							"const json = pm.response.json();",
							"",
							"// ulozit id vytvoreneho produktu to premennych kolekcie pod nazvom productId",
							"pm.collectionVariables.set('productsId', json.item.id);",
							"",
							"// overit response code je jedne z 200 alebo 201",
							"pm.test('201', () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([201,200])",
							"});",
							"",
							"// overit pomocou regexu ze id vytvoreneho produktu je cislo ",
							"pm.test('Match id', () => {",
							"    pm.expect(json.item.id).to.match(/^[0-9]+/);",
							"});",
							"",
							"// premenit staticke premenne v request body na dynamicke premenne ",
							"const dynamic = `{",
							"    \"product\": \"{{$randomProduct}}\",",
							"    \"name\": \"{{$randomProductName}}\",",
							"    \"price\": {{$randomPrice}},",
							"    \"material\": \"{{$randomProductMaterial}}\",",
							"    \"inStock\": true",
							"}`;",
							"",
							"// ulozit do premmenny kolekcie price a product",
							"pm.collectionVariables.set('createdProductPrice', json.item.price);",
							"pm.collectionVariables.set('createdProductName', json.item.name);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"product\": \"Test\",\n    \"name\": \"Test name\",\n    \"price\": 123.4,\n    \"material\": \"Test material\",\n    \"inStock\": true\n}\n\n\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "4 - Updated product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pouzit namiesto statickeho path parametra ulozenu collection premennu  {{productsId}}",
							"",
							"const json = pm.response.json();",
							"",
							"// vytiahnut si premennu kolekciu productsId",
							"const createdProduct = pm.collectionVariables.get('productsId');",
							"",
							"// vytiahnut premenne createdProductName a createdProductName a ulozit ako konstanty",
							"const createdPrice = pm.collectionVariables.get('createdProductPrice');",
							"const createdName = pm.collectionVariables.get('createdProductName');",
							"",
							"// overit ze updatnuta cena a meno je rozdielne ako vytvorena cena a meno",
							"pm.test('Updated price is different', () => {",
							"    pm.expect(json.item.price).is.not.equal(createdPrice);",
							"});",
							"",
							"pm.test('Updated name is different', () => {",
							"    pm.expect(json.item.price).is.not.equal(createdName);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"product\": \"{{$randomProduct}}\",\n    \"name\": \"{{$randomProductName}}\",\n    \"price\": {{$randomPrice}},\n    \"material\": \"{{$randomProductMaterial}}\",\n    \"inStock\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/products/8",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"products",
						"8"
					]
				}
			},
			"response": []
		},
		{
			"name": "4 - Delete product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// zmazat vytvoreny produkt pomocou zadanim collection variable id do url",
							"",
							"//overit ze response body bude true",
							"pm.test('Delete', () => {",
							"    pm.expect(pm.response.json()).to.be.true",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/products/{{productsId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"products",
						"{{productsId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "productsId",
			"value": ""
		},
		{
			"key": "createdProductPrice",
			"value": ""
		},
		{
			"key": "createdProductName",
			"value": ""
		}
	]
}