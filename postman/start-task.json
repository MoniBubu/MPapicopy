{
	"info": {
		"_postman_id": "c135c7b6-7056-47fd-8768-491145c2e703",
		"name": "Tasks",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18726878"
	},
	"item": [
		{
			"name": "1 - Head",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. overit status code 500 ",
							"// 2. overit ze response time je menej ako 100ms a viac ako 5ms",
							"// 3. overit ze response headers obsahuje Content-type je application/json",
							"// 4. overit ze cookies Job ma hodnotu AutomationTester",
							"// 5. overit ze status je Internal Server Error",
							"// 6. overit ze response ma body",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "HEAD",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/base",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"base"
					]
				}
			},
			"response": []
		},
		{
			"name": "2 - Get products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. vytvorit si konstantu json ktora bude mat hodnotu response body",
							"// 2. overit ze kazdy item ma kluce material a product pomocou include",
							"// 3. overit ze vsetky ceny produktov su typu number",
							"// 4. overit ze cena prodktov nie je nulova/prazdna",
							"// 5. vytvorit query parameter _limit ktory nam vrati pocet prvko 5",
							"// 6. vytvorit query ktora nam vrati response ktory bude obsahovat 5 itemov",
							"// 7. vytvorit query parameter _sort a zoradit podla ceny od najvacsej po najmensiu",
							"// 8. zoradit prvky podla ceny od najvacsej ceny po najmensiu a overit ze prvy cena prveho produktu je vacsia ako cena druheho produktu",
							"// 9. vytvorit query parameter ktory nam vrati prvky ktore maju cenu od 100 do 400",
							"// 10. cena je vacsia ako 100 a mensia ako 400",
							"// 11. najst vsetky produkty ktore maju inStock true a overit ze hodnota je boolean a rovna true",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/products?_limit=5&_sort=price&_order=desc&price_gte=100&price_lte=400",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"products"
					],
					"query": [
						{
							"key": "_limit",
							"value": "5"
						},
						{
							"key": "_sort",
							"value": "price"
						},
						{
							"key": "_order",
							"value": "desc"
						},
						{
							"key": "price_gte",
							"value": "100"
						},
						{
							"key": "price_lte",
							"value": "400"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3 - Get specific product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. vytvorit si konstantu json ktora bude mat hodnotu response body",
							"// 2. dotiahni si treti produkt pomocou path parametra a over to podla ID v response ",
							"// 3. vytvorit objekt ktory chceme porovnavat ",
							"// 4. napisat test na porovnanie ",
							"// 5. overit ze datum v updated je vo formate DD-MM-YYYY hh:mm:ss pomocou momentjs",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/products/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"products",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "4 - Create product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. ak response code nebude 200 je potrebne ho vymazat pomocou delete requestu",
							"// 2. vytvor noveho usera a over ze status code je bude 200 alebo 201",
							"// 3. ulozit id vytvoreneho produktu to premennych kolekcie pod nazvom productId",
							"// 4. overit response code je jedne z 200 alebo 201",
							"// 5. overit pomocou regexu ze id vytvoreneho produktu je cislo ",
							"// 6. premenit staticke premenne v request body na dynamicke premenne ",
							"// 7. ulozit do premmenny kolekcie price a product",
							"// 8. prerobit aby v path parameteri sa pouzivali premenne kolekcie namiesto statickych premennych",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"product\": \"Test\",\n    \"name\": \"Test name\",\n    \"price\": 123.4,\n    \"material\": \"Test material\",\n    \"inStock\": true\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "4 - Updated product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. pouzit namiesto statickeho path parametra ulozenu collection premennu  {{productsId}}",
							"// 2. vytiahnut si premennu kolekciu productsId",
							"// 3. vytiahnut premenne createdProductName a createdProductName a ulozit ako konstanty",
							"// 4. overit ze updatnuta cena a meno je rozdielne ako vytvorena cena a meno",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"product\": \"{{$randomProduct}}\",\n    \"name\": \"{{$randomProductName}}\",\n    \"price\": {{$randomPrice}},\n    \"material\": \"{{$randomProductMaterial}}\",\n    \"inStock\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/products/{{productsId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"products",
						"{{productsId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "4 - Delete product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. zmazat vytvoreny produkt pomocou zadanim collection variable id do url",
							"// 2. overit ze response body bude true",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/products/{{productsId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"products",
						"{{productsId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "5 - Create product fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. zostavit POST request ktory vrati status code 400 bad request"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "6 - Validate JSON schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. napisat test na JSON schemu",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/products/1",
					"host": [
						"{{url}}"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "7 - Validate JSON schema data variables",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. pouzit data subor pri overovani JSON schemy"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/products/{{product}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"products",
						"{{product}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "productsId",
			"value": ""
		},
		{
			"key": "createdProductPrice",
			"value": ""
		},
		{
			"key": "createdProductName",
			"value": ""
		}
	]
}